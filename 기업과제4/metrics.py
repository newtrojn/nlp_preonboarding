# -*- coding: utf-8 -*-
"""sub4 metrics.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1horNfij--JhwpkTMAMAcu6WvR1WrLXdw
"""

import numpy as np
from tqdm import tqdm
import time
def calculator(answer_list, prediction_list, tokenizer, scaler):

        if len(answer_list) == len(prediction_list):
            score_list=list()

            for idx in tqdm(range(len(answer_list))):
                review_data=answer_list[idx]
                predict_data=prediction_list[idx]

                #기사 내용 및 제목을 형태소 분리
                reviews_tokenized_list=tokenizer.pos(review_data)

                #추출된 요약문을 형태소 분리
                pred_tokenized_list = tokenizer.pos(predict_data)
                
                vocab_dict = dict()
                for word, pos in reviews_tokenized_list:
                    if (word,pos) in vocab_dict: 
                        vocab_dict[(word,pos)] += 1
                    else: 
                        vocab_dict[(word,pos)] = 1

                pos_dict = dict()
                for word, pos in reviews_tokenized_list:
                    if pos in pos_dict:
                        pos_dict[pos] += 1
                    else: 
                        pos_dict[pos] = 1

                pred_dict=dict()
                for word, pos in pred_tokenized_list:
                    if (word,pos) in vocab_dict.keys(): #원문과 겹치는 단어+품사 들만 사전 생성
                        if  (word,pos) in pred_dict: 
                            pred_dict[(word,pos)] += 1
                        else: 
                            pred_dict[(word,pos)] = 1

                common_count=list(pred_dict.values())  
                common_result=list(pred_dict.keys())
                pos_track=[]
                for idx2 in range(len(common_result)):
                    pos_track.append(pos_dict.get(common_result[idx2][1]))
                    
                word_track=[]
                for idx2 in range(len(common_result)):
                    word_track.append(vocab_dict.get(common_result[idx2]))
                    

                pos_track=np.array(pos_track)/sum(pos_dict.values())*100
                word_track=np.array(word_track)/sum(vocab_dict.values())*100
                common_count=np.array(common_count)

                final_score=sum(pos_track*word_track*common_count)
                score_list.append(final_score)
            #0~1 사이로 정규화
            score_list=scaler.fit_transform(np.array(score_list).reshape(-1,1))
            
            return score_list